"""
რელაციური - SQL და არარელაციური NOSQL- მონაცემთა ბაზები
Oracle, MSSQL, PostgreSQL, MySQL..., sqlite
"""

from configs import db, app, login_manager
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash


class Dog(db.Model):
    name = db.Column(db.String(), nullable=False)
    img = db.Column(db.String(), nullable=False)
    description = db.Column(db.String(), nullable=False)
    topic = db.Column(db.String(), nullable=False, default="Random")
    id = db.Column(db.Integer, primary_key=True)
    comment = db.relationship('Comment', backref='dog', lazy=True)



class Comment(db.Model):
    id = db.Column(db.Integer(), primary_key=True)
    content = db.Column(db.Text(), nullable=False)
    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer(), db.ForeignKey('dog.id'), nullable=False)
    user = db.relationship('User', backref='comments')

    def __str__(self):
        return f"{self.user_id}: {self.content}"

    @property
    def description_length(self):
        return len(self.description) if self.description else 0



class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(), nullable=False)
    password = db.Column(db.String(), nullable=False)
    role=db.Column(db.String(), nullable=False, default="guest")

    def __init__(self, username, password, role="guest"):
        self.username = username
        self.password = generate_password_hash(password)
        self.role = role




@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


if __name__ == '__main__':
    dogs = [{"name": "Tsunami", "img": "tsunami.jpg", "description": "A tsunami is a series of waves in a water body caused by the displacement of a large volume of water, generally in an ocean or a large lake. Earthquakes, volcanic eruptions and underwater explosions (including detonations, landslides, glacier calvings, meteorite impacts and other disturbances) above or below water all have the potential to generate a tsunami. Unlike normal ocean waves, which are generated by wind, or tides, which are in turn generated by the gravitational pull of the Moon and the Sun, a tsunami is generated by the displacement of water from a large event.", "id": 0},
            {"name": "dog2", "img": "dog2.jpeg", "description": "excited", "id": 1},
            {"name": "jeka", "img": "adadad.webp", "description": "annoyed, oahsfiwhfeihfioahbifshbaohefbihbwiofbhwiabfaobsihbfoaiwbfoiabofisbofaihfwbofihabsiofibhaowubofsbfoaibiusbofiuwbfsf", "id": 2}]
    with app.app_context():
        db.create_all()
        for dog in dogs:
            new_dog = Dog(name=dog["name"], img=dog["img"], description=dog["description"])
            db.session.add(new_dog)
            db.session.commit()

            user = User(username="user", password="123")
            admin = User(username="admin", password="admin123", role="admin")
            db.session.add(user)
            db.session.add(admin)
            db.session.commit()